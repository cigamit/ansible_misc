---
- name: Check previous job for change entries
  hosts: localhost
  gather_facts: no
  vars:
    tower_server: '{{ lookup("env", "TOWER_HOST") }}'
    tower_username: '{{ lookup("env", "TOWER_USERNAME") }}'
    tower_password: '{{ lookup("env", "TOWER_PASSWORD") }}'
    max: 50
    page_size: 200

  # We will be looping over multiple API pages, so its easiest to create individual reports per page, and then combine them together
  pre_tasks:
    # Lets first check if we have the proper variable to ensure we are not running from command line or outside a workflow
    - name: Precheck
      ansible.builtin.assert:
        that:
          - tower_workflow_job_id is defined
          - tower_workflow_job_id > 0
        fail_msg: "This playbook must be ran from a workflow within Controller"

    # Lets start building out our temporary reports directories
    - name: Ensure Reports directories exist
      ansible.builtin.file:
         state: directory
         path: "{{ playbook_dir }}/reports/fragments/"
      delegate_to: localhost
      run_once: true 
 
    # Lets clean up just in case (shouldn't need to EEs)
    - name: Ensure fragments directory is empty
      ansible.builtin.file:
         state: absent
         path: "{{ playbook_dir }}/reports/fragments/*"
      delegate_to: localhost
      run_once: true 

  tasks:
    # We have the ID of the currently running workflow job via the variable 'tower_workflow_job_id'
    # So we will use that to get the Template jobs that are associated with it
    - name: Get the Job ID for the first playbook run
      ansible.builtin.uri:
        url: https://{{ tower_server }}/api/v2/workflow_jobs/{{ tower_workflow_job_id }}/workflow_nodes/
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        body_format: json
        validate_certs: False
        force_basic_auth: yes
        status_code:
          - 200
      register: response

    # Lets get the job ID of the other job
    - ansible.builtin.set_fact:
        job_id: "{%- set job = namespace(job=0) -%}\
                 {%- for c in response.json.results -%}\
                   {%- if c.job != tower_job_id and c.summary_fields.job.status != 'running' and c.summary_fields.job.type == 'job' and c.job > job.job -%}\
                     {%- set job.job = c.job -%}\
                   {%- endif -%}\
                 {%- endfor -%}\
                 {{- job.job -}}"

    # Now that we have the Job ID of the first job of the workflow, we need to grab the job events to get the total number of changes
    - name: Get the Job Results for the first playbook run
      ansible.builtin.uri:
        url: https://{{ tower_server }}/api/v2/jobs/{{ job_id }}/job_events/?event=runner_on_ok&changed=true&page_size={{ page_size }}
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        body_format: json
        validate_certs: False
        force_basic_auth: yes
        status_code:
          - 200
      register: jdata

    # Display a quick message if we didn't detect any changes.  That way they aren't wondering if the job
    # didn't complete, etc.. 
    - ansible.builtin.debug: 
        msg: No Changes were detected
      when: jdata.json.count == 0

    - name: End Play if no changes
      ansible.builtin.meta: end_play
      when: jdata.json.count == 0
      
    ##### From here, we only continue if a change was actually made on the previous playbook #####

    # Set the total pages
    - name: Set Page Count
      ansible.builtin.set_fact:
        pages: "{{ ((jdata.json.count / page_size) | round(0, 'ceil') | int) + 1  }}"

    # We are limiting the number of pages we will pull, and since its sorted in reverse order, we will grab the newest data
    - name: Set Start Page Count
      ansible.builtin.set_fact:
        start: "{{ 1 if pages|int < max|int else ((pages|int) - (max|int)) }}"

    - name: Loop over the event pages backwards
      include_tasks: tasks/event_tasks.yml
      loop: "{{ range(start|int, pages|int) | list }}"
      loop_control:
        loop_var: page

  post_tasks:
    - name: Concat all the html files 
      ansible.builtin.assemble: 
        src: "{{ playbook_dir }}/reports/fragments/"
        dest: "{{ playbook_dir }}/reports/changes.html"
      run_once: true 
 
    - name: Append the header to the html file 
      ansible.builtin.lineinfile: 
        dest: "{{ playbook_dir }}/reports/changes.html"
        insertbefore: BOF 
        line: "{{ lookup('ansible.builtin.template', 'templates/header.html.j2') }}"
      
    - name: Append the footer to the html file 
      ansible.builtin.lineinfile: 
        dest: "{{ playbook_dir }}/reports/changes.html"
        insertafter: EOF 
        line: "{{ lookup('ansible.builtin.template', 'templates/footer.html.j2') }}"
 
    # For testing purposes, you will want to disable this later
    #- name: Display Report
    #  ansible.builtin.debug:
    #    var: item
    #  with_file:
    #      - "{{ playbook_dir }}/reports/changes.html"

    # Send out the report
    - name: Mail Report
      community.general.mail:
        host: "{{ smtp_server | default('127.0.0.1') }}"
        port: "{{ smtp_port | default(25) }}"
        subject: Change Report - {{ jdata.json.results[0].summary_fields.job.name }}
        body: |
              Attached is the change report for <b>{{ jdata.json.results[0].summary_fields.job.name }}</b><br><br>
              <a href="https://{{ tower_server }}/#/jobs/workflow/{{ tower_workflow_job_id }}/output">Workflow</a><br>
              <a href="https://{{ tower_server }}/#/jobs/playbook/{{ job_id }}/output">Job</a><br>
        from: "{{ from_address }}"
        to:
          - "{{ to_address }}"
        attach:
          - "{{ playbook_dir }}/reports/changes.html"
        subtype: html
      ignore_errors: true
